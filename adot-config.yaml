receivers:
  otlp:
    protocols:
      grpc:
      http:
  prometheus:
    config:
      global:
        scrape_interval: 15s
        scrape_timeout: 10s
      scrape_configs:
        - job_name: ${service_name}
          static_configs:
            - targets: [ 0.0.0.0:${container_port} ]
              labels:
                ecs_cluster: ${ecs_cluster}
                ecs_revision: ${ecs_revision}
                env: ${env}
  awsecscontainermetrics:
    collection_interval: 20s

processors:
  batch/traces:
    timeout: 30s
    send_batch_size: 50
  filter:
    metrics:
      include:
        match_type: strict
        metric_names:
          - ecs.task.memory.utilized
          - ecs.task.memory.reserved
          - ecs.task.cpu.utilized
          - ecs.task.cpu.reserved
          - ecs.task.network.rate.rx
          - ecs.task.network.rate.tx
          - ecs.task.storage.read_bytes
          - ecs.task.storage.write_bytes
exporters:
  awsprometheusremotewrite:
    endpoint: https://aps-workspaces.us-east-1.amazonaws.com/workspaces/ws-62b76f06-5262-4dde-9fda-778f3e18cfb6/api/v1/remote_write
    aws_auth:
      region: us-east-1
      service: "aps"
  logging:
    loglevel: error
  otlphttp:
    endpoint: tempo-us-central1.grafana.net:443
    headers:
      authorization: Basic ${grafana_tempo_apikey}
    
extensions:
  health_check:
  pprof:
    endpoint: :1888
  zpages:
    endpoint: :55679

service:
  extensions: [pprof, zpages, health_check]
  pipelines:
    otlp:
      receivers: [otlp]
      processors: [batch/traces]
      exporters: [otlphttp]
    metrics:
      receivers: [prometheus]
      exporters: [logging, awsprometheusremotewrite]
    metrics/ecs:
      receivers: [awsecscontainermetrics]
      processors: [filter]
      exporters: [logging, awsprometheusremotewrite]